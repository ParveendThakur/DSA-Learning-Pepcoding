// https://nados.io/article/generic-trees-introduction-and-data-members
// https://nados.io/video/generic-tree-introduction-and-data-members-java-hindi
Generic Trees- Introduction and Data Members
Welcome back, dear reader. So, how was the Linked List section for you? Did you enjoy solving the problems? So, from here onwards, we are starting with a very interesting and new data structure called Tree. A tree data structure can also be of various types. The type we are starting with is called Generic Tree.


1. Why Trees?
Dear reader, let us recall some of the data structures that we have already studied. We have studied quite a lot about arrays, then we moved to the Arraylists, then we have also studied about the stacks and queues and linked lists. Array: An array is a linear data structure which stores elements of the same data type in a contiguous memory. The contiguous memory means that the memory addresses of the elements of an array are in continuation and it is not random.




The size of int data type is 4 bytes. So, if the first element has a memory address of 200 and it takes 4 bytes i.e. 200-203, then the next element starts from the very next memory address 204. ArrayList: An arraylist is just like an array. The only difference is that an arraylist is dynamic in nature i.e. it does not have a fixed size. We can enter as many elements as we want in the array list and it increases/adjusts its size automatically. Stack: A stack data structure is also dynamic, just like an arraylist but it follows the LIFO principle i.e. last-in-first-out principle. The element that is inserted first into the stack comes out of it last. The elements are inserted and deleted from the top only.




Queue: A queue is also very similar to an arraylist because of its dynamic size property, but it follows FIFO principle i.e. first-in-first-out principle. The elements are always inserted at the rear end of the queue and always deleted from the front.




Linked List: The linked list data structure is also a linear data structure where the memory is not contiguous and the nodes are connected to each other via some links. These links are not physical. We store the address of the next node in the previous node and the first node is called the head and the last node is the tail.




So, what is common between all these data structures? They all are linear data structures i.e. the physical structure or the memory allocation of these data structures in linear. But, in real life, many times we do not want the data to be stored linearly. Therefore these data structures can't be enough for us. Now the question is, "What is a tree data structure and what does it offer us?" Let us take an example of my own laptop and the folders inside it. Have a look at the diagram given below:




Inside the "D drive" of my laptop, I have got two folders. One of them is named personal and other is named college. The personal folder has 3 folders inside it i.e. "Movies and Series", "Photos" and "Accounts and Passwords" whereas, the college folder has 4 folders inside it as shown above. This form of data arrangement is called hierarchical arrangement of data. The hierarchy means the generation order. As in the above example the personal folder and the college folder are inside the "D drive". So, the D drive comes first and it can be called the parent of the college folder and the personal folder. So, this type of data arrangement where hierarchy is involved can be stored using a data structure called the tree data structure.


2. Generic Tree:
The above diagram shows a hierarchical structure of the folders and that structure is called a tree. As any other data structure, a tree can be an integer tree or a tree of double numbers or a tree of strings etc. A tree of integers is shown below:




The element "9" is at the top of the hierarchy and all the other nodes are descended from it. Let us understand some keywords regarding the tree data structure and understand why this tree is called a "generic tree".


1• Parent Node: The node that is connected to one or many nodes in the next hierarchical level (i.e. level below this node) is called a parent node. 2• Child Node: The node that is connected to one node in the previous hierarchical level (i.e. level above it) is called a child node.






As shown in the diagrams above, 9 is the parent node of 8,3 and 10. Similarly, 8 is the parent node for 2 , 3is the parent node for 20 and 70 and 10 is the parent node for 40 and so on. Also, we can see who is a child of whom. So, we guess that you have understood till here. If you have any doubts regarding the above explained topics, you may refer to the solution video to clear all your doubts.


For more clarity of the question, watch the question video

Play Video
3.Root Node: The node at the top of the hierarchy level in a tree who has no parent node and all the other nodes descended from it is called the root node. For example: 9 is the root node in the tree shown above. 4.Leaf Nodes: All the nodes (not necessarily at the lowest level) that do not have any child nodes are called the leaf nodes.




5.Ancestors of a Node: All the nodes from which a particular node is inherited are called the ancestors of that node. 6.Descendants of a Node: All the nodes that descend (or inherit) from a particular node are called the descendants of that node. We can also say that all the nodes in the sub-tree descended from a node are its descendants. For example: in the diagram below, all the elements of the sub-tree that is descendant from 10 are its descendants.




Note: The root node is the ancestor of every node as every node is descended from it. So, we hope that you have understood this terminology. There are a lot of more terms related to the tree data structure that we can study. We will study them as we move forward in the topic. We have still not answered one question i.e. what exactly is the difference between a tree and a generic tree? So let's answer this question.


Understanding the Generic Tree:

Have a look at the diagram shown below:




Three different nodes in this tree have 3 different numbers of child nodes. So, if the maximum number of child nodes of a tree is not fixed and it can have as many child nodes as there can be, then it is called a generic tree. So, a generic tree is a tree where it might happen that a node would not have any child (leaf node) and a node would have 10 or 100 children. So, the maximum number of child nodes of a node is not specific rather general and hence the name is generic tree.


3. Generic Tree'Data Members
A tree is made up of nodes. So, before we make our own tree, we need to create our node first. What information do we get from a particular node of a generic tree?




A node in a generic tree stores its own data and also tells us about its child nodes. How will it tell us about its child nodes? It will tell us about the child node by storing the addresses of these child nodes also. So, we do not have a single child node, rather we have multiple. So, we can use an array of nodes to store the addresses of the child nodes. But, there is another problem. We do not know about the number of child nodes of a particular node. If a node has two children, we have to make an array of size 2 and if it has 5 children, we have to make an array of size 5. So, we have to make an array of dynamic size. Therefore, it is better to use an arraylist to achieve this functionality. Therefore, the node will consist of its data and an arraylist of its child nodes. Also, a tree is identified only by its root node. So, we do not need to make a separate class for generic trees, rather we can make a root variable of type node and use it directly to show a unique tree. This is shown in the code below:


import java.util.*;

import java.io.*;
public class Main
{
  public class Node
  {
    int data;  //for storing the data
    ArrayList< Node> children = new ArrayList< >(); //for storing the child nodes
  }
  public static void main(String[] args)
  {
    Node root; //unique node for a tree
  }
}
So dear reader, did you understand the generic tree and all the keywords associated with it that we have talked about? Don't worry if you have any problem regarding that or the data members. You may refer to the complete solution video to understand all the concepts properly and all your doubts will be cleared.


For more clarity of the question, watch the question video

Play Video
4. Suggestions:
Here are some suggestions from our side that you do not want to miss:


1• It is the beginning of the tree data structure and we know that you might have a lot of doubts in your mind right now. Don't worry, just be patient and keep learning. The more we will move forward in this topic the more you will learn and your doubts will get cleared in the way. 2• The tree data structure is very important as far as interviews of the big tech giants are concerned. Keep up your momentum and learn this topic with full concentration. You will enjoy it a lot. Also, you already have a little bit of idea about the tree data structure from recursion. We suggest you revise recursion also as it is going to be the basis for studying trees and you will find this topic a lot more easy and interesting if you have a good hold over recursion. So till then, I will take your leave. Happy Coding!!!